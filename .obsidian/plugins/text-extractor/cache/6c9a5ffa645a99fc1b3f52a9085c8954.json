{"path":"Resources/Pasted Image 20240918132705_865.png","text":"a/sx * - Responsibility: Each class is responsible for its output data lifecycle - it owns its output as a member variable. * - Interface: AlgorithmicObject has restricted public interfaces - Initialize(), Execute(), which are implemented in * InitalizeThis() and ExecuteThis() in individual classes for the architecture to control the process in * a standard manner, e.g. logging, exception handling, etc.. * - Composition and Association: Class objects are related in composition or association by their lifecycle management scheme. * - Composition: 'Child' objects are registered as components of a parent class by which their lifecycle is managed: kind of * sub-algorithm can be implemented in this way. * - Association: 'Friend' objects are registered as associations their creation and deletion is not up to the target object: k * this way. Usually, a class has several child objects (components) which are associated with each other. * - Usage: You can refer to test codes in AlgorithmicObjectTest.h and some domain class headers (e.g. CompositePolygon.h) * for usage examples. ix/ Bclass AlgorithmicObject: public KvObject","libVersion":"0.3.2","langs":"eng"}