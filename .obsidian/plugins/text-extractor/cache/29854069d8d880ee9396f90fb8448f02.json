{"path":"Resources/Pasted image 20241016100745.png","text":"1/// <summary> /// Manages common logic related to barcode sequences. /// </sunmary> 3 references. public static class Badmarksequence 1{ | private static NLog.Logger logger = NLog.LogManager.GetCurrentClassLogger(); '\\ /// <sunmary> { /// BA Holl pebuggingg SÂ¥2 =l 2ol, ALAOIAl 2 \\ \" 7// </sunmary> | /// <param name=\"dcsEnv\"></paran> | /// <param name=\"stage\"></paran> | /// <param name=\"fiducialGrabFovId\"></paran> | e | public static void BadmarkErrorAction(BadmarkErrorReason badmarkFaillnfos, Mcs.Lane laneId, Stage.IStage stage, bool dryRun) i i f .ogger.Info($\"Publishing ObjectErrorActionStartNotice by Badmark\");] | | var objectErrorActionStartNotice = new ObjectErrorActionStarthotice ISR { | | areaType = AreaType.Badmark, | f [REUSER EUE O { | | BadmarkFaillnfo = badmarkFailInfos, FR || if (dryRun) o objectErrorActionsStartNotice.RemoveTopic(EventBase.Topics.LineControlSystem); | | [ctage?.publish(objectErrorActionStartotice, verbose: true); | |stage?.Publish(new ProductionstatusChangeCommand { ChangeStatus = ProductionstatusChange.Pause, }, verbose: true)j | | stage?.Publish(new ChangeTowerLampStatusCommand { Use = true, Red = TowerLampStatus.On, Yellow = TowerLampStatus.Off, Green = TowerLampStatus.Off, Bu: ! 1 |","libVersion":"0.3.2","langs":"eng"}