{"path":"Resources/image.png","text":"S A e et e e e e e R namespace DataControlSystem.Core.BehaviorTree . public class PublishErrorActionAfterCompletionIfBadmarkixceed : BehaviorActionNode R protected override Behaviorstatus OnInvoke() i try L= i © | | var badmarkCount = inputDatablock.BoardDetail.BadmarkobjectInspectionResults.Select(x => x.Value).OfType<ObjectInspectionResult> g I I I I .Select(y => y.VisionResult).where(g => g.ResultSets.Any(h => h.visionItemResult == EnumResultStatus.eGD)).Count(); o= {1 | | if (badmarkCount < envBadmarkItem.MaximumNumberofBadmark) return (returnvalue = BehaviorStatus.Success); e [ A= {1 | | var currentFovId = inputDatablock.GrabInfo.FovId; T {1 | | var fovoptimizedItem = inputDatablock.BoardInfo.FovOptimizeItem; e { | | | var lastFovId = fovOptimizedItem.ObjectsInFov.LastorDefault().Key; (B Ti ! | | if (currentFovId == lastFovId) LE I R @ . . | | [ar badnarkErrorReason = new BadmarkErrorReason() 1 7 7t = .. | | | | _errorReason = BadmarkErrorReason.ErrorReason.MaximumNumberofBadmarksExceeded ' L 3] B i i i f i BadmarkSequence . BadmarkErrorAction(badmarkErrorReason, mcsEndpoint.Info.CurrentLaneld, Stage.Get(), inputDatablock.BoardInfo a /I LE i1 1 | | stage.TryGet(out var stage); . { | | | | stage?.publish(new StageStopCommand()); E J ~_ [eage?.Publish(neu StageResetRequest{BoardInfo = inputDatablock.BoardInfo, BoardDetail = inputDatablock.BoardDetail }); e I H D e —— - { | | | return (returnvalue = BehaviorStatus.Success);","libVersion":"0.3.2","langs":"eng"}