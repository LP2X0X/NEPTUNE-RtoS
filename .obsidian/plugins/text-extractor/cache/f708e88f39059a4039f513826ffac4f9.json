{"path":"Excalidraw/Drawing 2024-11-07 14.16.02.excalidraw.png","text":"[IgnoreMember, JsonIgnore] public Action<string, object, PropertyInfo, RecipeKeyAttribute, object> OnSetvValueHandler; B AS I C F LOW ‘['l:;t-l:-odlq)l(nethodlq)lmum.lggressivemlinmg)] public ManagedMap SetValue(string key, byte value) { mapByte[key] = value; return this; } [MethodImpl(MethodImplOptions.AggressiveInlining)] public ManagedMap SetValue(string key, bool value) { mapBool[key] = value; return this; } ?nmdlml(nethodlnplmtim.lggressivemwmg)] public ManagedMap SetValue(string key, int value) { mapint[key] = value; return this; } DCS VI S I O N L retwrencen [MethodImpl(MethodImplOptions. AggressiveInlining)] public ManagedMap SetValue(string key, long value) { maplLongLong[key] = value; return this; } [MethodImpl(MethodImplOptions. AggressiveInlining)] public ManagedMap SetValue(string key, float value) { mapFloat[key] = value; return this; } : Set param [MethodImpl(MethodImplOptions. AggressiveInlining)] public ManagedMap SetValue(string key, double value) { mapDouble[key] = value; return this; } \\L [MethodImpl(MethodImplOptions.AggressiveInlining)] public ManagedMap SetvValue(string key, string value) { mapString[key] = value.WrapAsNull() ?? \"*; return this; } | Send to Vision e Package in ManagedMap =——0o—o——>> Deserialize .['l-l:t-l't-odlqll(nethodlq)lq)tions.hggressivemmug)] public ManagedMap SetValue(string key, IntPtr value) { mapPointer[key] = value.ToInt6d(); return this; } Serialize \\I/ [MethodImpl(MethodImplOptions. AggressiveInlining)] public ManagedMap SetValue(string key, NRectangleInt value) { mapRECT[key] = Tuple.Create(value.xMin, value.yMin, value.xMax, value.yMax); return this; } ’['l‘l:t-lrodlqﬂ(nethodlq)lmdcns.hggnssiveInUning)] public ManagedMap SetValue(string key, NSize value) { mapSIZE[key] = Tuple.Create(value.width, value._ Height); return this; } Set param :[Et.—':.“ml(nethodhpwpums.lggressivemming)] public MaRagedNap Setvalue(string key, Point value) { mapPOINT[key] = Tuple.Create(value.X, value.Y); return this; } | send to Pes J’ ‘[.l::t_l:.odlq)l(nethodlq)lmdcns.hggnssivemming)] public ManagedMap SetValue(string key, Size2f value) { vmapFloat[key] = new float[] { value.width, value.Meight }; return this; } ecorialige : Execute ‘['l::t-l:odlml(lethodlq)lmtlnns.uggressivemljning)] public ManagedMap SetValue(string key, Point2f value) { vmapFloat[key] = new float[] { value.X, value.Y }; return this; } Seindl el dae [MethodImpl(MethodImplOptions. AggressiveInlining)] public ManagedMap SetValue(string key, Point2d value) { vmapDouble[key] = new double[] { value.X, value.Y }; return this; } \\l/ :[El:odlqﬂ.(llethodlq)lmunns.lggressivemwhg)] public ManagedMap SetValue(string key, Point3d value) { vmapDouble[key] = new double[] { value.X, value.¥Y, value.Z }; return this; } andle result [MethodImpl(MethodImplOptions.AggressiveInlining)] public ManagedMap SetValue(string key, NCircle value) { vmapDouble[key] = new[] { value.CenterX, value.CenterY, value.Radius }; return this; } o['l'l:t-lrodlq)l(lethodlq)lmucns.lggressivelnming)] public ManagedMap SetValue(string key, NCircleF value) { vmapFloat[key] = new[] { value.CenterX, value.CenterY, value.Radius }; return this; } I i ‘['l'l:t-:odlq:l(llethodIleﬁm.Aggressivemlinug)] public ManagedMap SetValue(string key, IEnumerable<byte> value) { vmapByte[key] = value.ToArray(); return this; } - [MethodImpl(MethodImplOptions. AggressiveInlining)] public ManagedMap SetValue(string key, ReadOnlySpan<byte> value) { vemapByte[key] = value.ToArray(); return this; } P RO B L E M [MethodImpl(MethodImplOptions. AggressiveInlining)] public ManagedMap SetValue(string key, ReadOnlySequence<byte> value) { vmapByte[key] = value.ToArray(); return this; } (RehostapLheehodtaploptons. Aggressivetnlining)] i NaRGENRD SeevalueCocring key, bycel] value) { vaspeytelkey] = value. TokFray(); cecien ehis; } SR et S TR Tl 3, Send oy dmage [MethodImpl(MethodImplOptions. AggressiveInlining)] public ManagedMap SetValue(string key, IEnumerable<bool> value) { vmapBool[key] = value.ToArray(); return this; } [NethodIapl(NethodInplOptions. AggressiveInlining)) public EESEEEEES SetValue(string key, IEmumerablecint> value) { vmapInt[key] = value.ToArray(); return this; } void SetBlobFeature(SurfaceBlobFeature* pSurfaceBlobFeature) { m_pSurfaceBlobFeature = pSurfaceBlobFeature; }; [MethodImpl(MethodImplOptions. AggressiveInlining)] public ManagedMap SetValue(string key, IEnumerable<long> value) { vmapLongLong[key] = value.ToArray(); return this; } [MethodImpl(MethodImplOptions.AggressiveInlining)] public ManagedMap SetvValue(string key, IEnumerable<float> value) { vmapFloat[key] = value.ToArray(); return this; } Can't send a whole object! [MethodImpl(MethodImplOptions. AggressiveInlining)] public ManagedMap SetValue(string key, IEnumerable<double> value) { vmapDouble[key] = value.ToArray(); return this; } . AILED €2 Lnvekis Setes Dshlel S B sille! ’['l'l:t-lrodlqn(llethodmm)ﬁm.hggressivemljnhg)] public ManagedMap SetValue(string key, IEnumerable<string> value) { vmapString[key] = value.Select(x => x.WrapAsNull() ?? \"\") . ToArray(); return this; } (@Y Ik oEY=T 0 Vo IS AT-T T U -1 o IY<N i of o oY o 3y H=T o ol s TN O = I e [} o['l‘::t..l‘t_odlq)l(llethodlq:lﬂ:ticns.Aggressivelnljliing)] public ManagedMap SetValue(string key, IEnumerable<IntPtr> value) { vmapPointer[key] = value.Select(x => x.ToInt6d()).ToArray(); return this; } ’ [MethodImpl(MethodImplOptions. AggressiveInlining)] public ManagedMap SetValue(string key, IEnumerable<NRectangleInt> value) { vmapRECT[key] = value.Select(x => Tuple.Create(x.xMin, x.yMin, x.xMax, x.yMax)).ToAr [MethodImpl(MethodImplOptions. AggressiveInlining)] public ManagedMap SetValue(string key, IEnumerable<NSize> value) { vemapSIZE[key] = value.Select(x => Tuple.Create(x.width, x.Height)).ToArray(); return this; } S O L UT I ON 1. Only send necessary param (Images, array which managed map can handle) 2. Allow set result in C+ side (Bad practice)","libVersion":"0.3.2","langs":"eng"}