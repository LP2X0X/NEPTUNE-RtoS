{"path":"Resources/Pasted Image 20240205140125_680.png","text":"private void SetCoatingMeasureResult(string resultDbName, InspectionItem item) { // CoatingÂ®| 7iZ TableOj= NGl HO|E{Rt SOf 217] WHi20] ZFgk2 false bool onlyFalse = false; var coatingQuery = item.GetMeasureResultDetailQuery<TB_CCI_CT_INSUFFICIENT>(); var insufficients = connection?.ExecuteQuery<InsufficientResult>(resultDbName, coatingQuery); var insufficientResult = insufficients?.Select(x => new InspectionItemResult(x.MeasureType, item. ArrayIdx, x.DefectIdx, onlyFalse, onlyFalse, x5 var a = insufficients[@].ImageUV; if (insufficientResult?.Any() is true) item.Result.AddRange(insufficientResult); var bubbleQuery = item.GetMeasureResultDetailQuery<TB_CCI_CT_BUBBLE>(); var bubbles = connection?.ExecuteQuery<BubbleResult>(resultDbName, bubbleQuery); var bubbleResult = bubbles?.Select(x => new InspectionItemResult(x.MeasureType, item. ArrayIdx, x.DefectIdx, onlyFalse, onlyFalse, )i if (bubbleResult?.Any() is true) item.Result.AddRange(bubbleResult); var crackQuery = item.GetMeasureResultDetailQuery<TB_CCI_CT_CRACK>(); var cracks = connection?.ExecuteQuery<CrackResult>(resultDbName, crackQuery); var crackResult = cracks?.Select(x => new InspectionItemResult(x.MeasureType, item.ArrayIdx, x.DefectIdx, onlyFalse, onlyFalse, x5 if (crackResult?.Any() is true) item.Result.AddRange(crackResult); }","libVersion":"0.3.2","langs":"eng"}