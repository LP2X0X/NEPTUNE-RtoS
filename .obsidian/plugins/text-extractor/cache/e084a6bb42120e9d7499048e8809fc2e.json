{"path":"Resources/Pasted Image 20240129145148_752.png","text":"private async Task SelectedPCBChanged(object selectedRow) ] selectedBoardModel = selectedRow as Board; if (selectedBoardModel is null) { inspResultUpdater?.Invoke(this, new UpdateInspectionBaordEventArgs(null)); return; 1 InpItems = new List<InspectionItem>(); Results = new List<IInspectionItemResult>(); try o= if (boardInfos.ContainsKey(selectedBoardModel.PcbGuid)) { var boardInfo = boardInfos[selectedBoardModel.PcbGuid].Iteml; inspResultUpdater?.Invoke(this, new UpdateInspectionBaordEventArgs(boardInfo)); InpItems = boardInfos[selectedBoardModel.PcbGuid].Item2; RaisePropertyChanged(nameof(InpItems)); || return; } InpItems = await Task.Run(async () => { var boardBinData = await resultDataReader.GetBoardInfoAsync(selectedBoardModel); if (boardBinData is null || boardBinData?.Length is @) { ‘throw new Exception($\"Get Board Info Failed. \\r\\n {selectedBoardModel}\"); 3 var boardInfo = await resultDataParser.CreateBoardInfoAsync(selectedBoardModel, boardBinData); inspResultUpdater?.Invoke(this, new UpdateInspectionBaordEventArgs(boardInfo)); var inspItems = await resultDataReader.CreateInspectionItemsAsync(selectedBoardModel) ?? new List<InspectionItem>(); /7 M8 PEE MYUCHE YAR. AW 0jd DB TN ME BHE boardInfos.Add(boardInfo.PcbGuid, (boardInfo, inspItems)); return inspItems; D; 1 catch (Exception ex) { MessageBox. Show(ex.Message); ¥ }","libVersion":"0.3.2","langs":"eng"}